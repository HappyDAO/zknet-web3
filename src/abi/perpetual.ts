/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

export declare namespace IVault {
  export type SignedAccountStruct = {
    addr: string
    timestamp: string
    signature: string
  }

  export type SignedAccountStructOutput = [string, string, string] & {
    addr: string
    timestamp: string
    signature: string
  }
}

export declare namespace ITrade {
  export type DeleverageOrderStruct = {
    positionId: BigNumberish
    sold: BigNumberish
    fee: BigNumberish
  }

  export type DeleverageOrderStructOutput = [BigNumber, BigNumber, BigNumber] & {
    positionId: BigNumber
    sold: BigNumber
    fee: BigNumber
  }

  export type IndiceStruct = { token: BigNumberish; proce: BigNumberish }

  export type IndiceStructOutput = [number, BigNumber] & {
    token: number
    proce: BigNumber
  }

  export type OrderStruct = {
    id: BigNumberish
    typ: string
    trader: string
    positionId: BigNumberish
    positionToken: BigNumberish
    positionAmount: BigNumberish
    fee: BigNumberish
    extend: string
    timestamp: BigNumberish
    signature: BytesLike
  }

  export type OrderStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    number,
    string
  ] & {
    id: BigNumber
    typ: string
    trader: string
    positionId: BigNumber
    positionToken: number
    positionAmount: BigNumber
    fee: BigNumber
    extend: string
    timestamp: number
    signature: string
  }

  export type SettlementInfoStruct = {
    positionSold: BigNumberish
    partAFee: BigNumberish
    partBFee: BigNumberish
  }

  export type SettlementInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    positionSold: BigNumber
    partAFee: BigNumber
    partBFee: BigNumber
  }

  export type SignedPriceStruct = {
    pk: string
    price: BigNumberish
    timestamp: BigNumberish
    signature: string
  }

  export type SignedPriceStructOutput = [string, BigNumber, BigNumber, string] & {
    pk: string
    price: BigNumber
    timestamp: BigNumber
    signature: string
  }

  export type OraclePriceStruct = {
    token: BigNumberish
    price: BigNumberish
    signedPrices: ITrade.SignedPriceStruct[]
  }

  export type OraclePriceStructOutput = [number, BigNumber, ITrade.SignedPriceStructOutput[]] & {
    token: number
    price: BigNumber
    signedPrices: ITrade.SignedPriceStructOutput[]
  }
}

export interface PerpetualInterface extends utils.Interface {
  functions: {
    'balanceOf(address,uint32)': FunctionFragment
    'bind((string,string,string))': FunctionFragment
    'chanageManager(address)': FunctionFragment
    'deleverage((uint64,uint256,uint256),(uint64,uint256,uint256))': FunctionFragment
    'deposit(uint32,uint256)': FunctionFragment
    'disableManager()': FunctionFragment
    'domainSeparator()': FunctionFragment
    'fundingTick((uint32,uint256)[])': FunctionFragment
    'liquidate(uint64,(uint256,string,address,uint64,uint32,int256,uint256,string,uint32,bytes),(uint256,uint256,uint256))': FunctionFragment
    'manager()': FunctionFragment
    'oraclePricesTick((uint32,uint256,(string,uint256,uint64,string)[])[])': FunctionFragment
    'owner()': FunctionFragment
    'positionDeposit(uint64,uint32,uint256)': FunctionFragment
    'positionWithdraw(uint64,uint32,uint256)': FunctionFragment
    'registerToken(address,uint32)': FunctionFragment
    'settlement((uint256,string,address,uint64,uint32,int256,uint256,string,uint32,bytes),(uint256,string,address,uint64,uint32,int256,uint256,string,uint32,bytes),(uint256,uint256,uint256))': FunctionFragment
    'tokenAddress(uint32)': FunctionFragment
    'transfer(address,uint32,uint256,uint256)': FunctionFragment
    'withdraw(uint32,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'balanceOf'
      | 'bind'
      | 'chanageManager'
      | 'deleverage'
      | 'deposit'
      | 'disableManager'
      | 'domainSeparator'
      | 'fundingTick'
      | 'liquidate'
      | 'manager'
      | 'oraclePricesTick'
      | 'owner'
      | 'positionDeposit'
      | 'positionWithdraw'
      | 'registerToken'
      | 'settlement'
      | 'tokenAddress'
      | 'transfer'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'balanceOf', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'bind', values: [IVault.SignedAccountStruct]): string
  encodeFunctionData(functionFragment: 'chanageManager', values: [string]): string
  encodeFunctionData(
    functionFragment: 'deleverage',
    values: [ITrade.DeleverageOrderStruct, ITrade.DeleverageOrderStruct]
  ): string
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'disableManager', values?: undefined): string
  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string
  encodeFunctionData(functionFragment: 'fundingTick', values: [ITrade.IndiceStruct[]]): string
  encodeFunctionData(
    functionFragment: 'liquidate',
    values: [BigNumberish, ITrade.OrderStruct, ITrade.SettlementInfoStruct]
  ): string
  encodeFunctionData(functionFragment: 'manager', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'oraclePricesTick',
    values: [ITrade.OraclePriceStruct[]]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'positionDeposit',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'positionWithdraw',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'registerToken', values: [string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'settlement',
    values: [ITrade.OrderStruct, ITrade.OrderStruct, ITrade.SettlementInfoStruct]
  ): string
  encodeFunctionData(functionFragment: 'tokenAddress', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish, BigNumberish]): string

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bind', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'chanageManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deleverage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disableManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'fundingTick', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'liquidate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'manager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oraclePricesTick', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'positionDeposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'positionWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'registerToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settlement', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'LogBind(string,string)': EventFragment
    'LogDeposit(uint32,address,uint256)': EventFragment
    'LogFundingTick(uint32,int256)': EventFragment
    'LogPositionChange(uint64,uint256,uint256)': EventFragment
    'LogPositionDeposit(uint64,uint32,address,uint256)': EventFragment
    'LogPositionWithdrawn(uint64,uint32,address,uint256)': EventFragment
    'LogTransfer(address,address,uint32,uint256)': EventFragment
    'LogWithdrawn(uint32,address,uint256)': EventFragment
    'ManagerChanged(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'LogBind'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogFundingTick'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogPositionChange'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogPositionDeposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogPositionWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogTransfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'LogWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ManagerChanged'): EventFragment
}

export interface LogBindEventObject {
  addrL1: string
  addrL2: string
}
export type LogBindEvent = TypedEvent<[string, string], LogBindEventObject>

export type LogBindEventFilter = TypedEventFilter<LogBindEvent>

export interface LogDepositEventObject {
  token: number
  account: string
  amount: BigNumber
}
export type LogDepositEvent = TypedEvent<[number, string, BigNumber], LogDepositEventObject>

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>

export interface LogFundingTickEventObject {
  positiontoken: number
  fundingRate: BigNumber
}
export type LogFundingTickEvent = TypedEvent<[number, BigNumber], LogFundingTickEventObject>

export type LogFundingTickEventFilter = TypedEventFilter<LogFundingTickEvent>

export interface LogPositionChangeEventObject {
  positionId: BigNumber
  marginAmount: BigNumber
  positionAmount: BigNumber
}
export type LogPositionChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LogPositionChangeEventObject
>

export type LogPositionChangeEventFilter = TypedEventFilter<LogPositionChangeEvent>

export interface LogPositionDepositEventObject {
  positionId: BigNumber
  token: number
  account: string
  amount: BigNumber
}
export type LogPositionDepositEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  LogPositionDepositEventObject
>

export type LogPositionDepositEventFilter = TypedEventFilter<LogPositionDepositEvent>

export interface LogPositionWithdrawnEventObject {
  positionId: BigNumber
  token: number
  account: string
  amount: BigNumber
}
export type LogPositionWithdrawnEvent = TypedEvent<
  [BigNumber, number, string, BigNumber],
  LogPositionWithdrawnEventObject
>

export type LogPositionWithdrawnEventFilter = TypedEventFilter<LogPositionWithdrawnEvent>

export interface LogTransferEventObject {
  from: string
  to: string
  token: number
  amount: BigNumber
}
export type LogTransferEvent = TypedEvent<
  [string, string, number, BigNumber],
  LogTransferEventObject
>

export type LogTransferEventFilter = TypedEventFilter<LogTransferEvent>

export interface LogWithdrawnEventObject {
  token: number
  account: string
  amount: BigNumber
}
export type LogWithdrawnEvent = TypedEvent<[number, string, BigNumber], LogWithdrawnEventObject>

export type LogWithdrawnEventFilter = TypedEventFilter<LogWithdrawnEvent>

export interface ManagerChangedEventObject {
  previousManager: string
  newManager: string
}
export type ManagerChangedEvent = TypedEvent<[string, string], ManagerChangedEventObject>

export type ManagerChangedEventFilter = TypedEventFilter<ManagerChangedEvent>

export interface Perpetual extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PerpetualInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    balanceOf(account: string, token: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    bind(
      l1Account: IVault.SignedAccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    chanageManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deleverage(
      deleveragedOrder: ITrade.DeleverageOrderStruct,
      deleveragerOrder: ITrade.DeleverageOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deposit(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disableManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<[string]>

    fundingTick(
      indices: ITrade.IndiceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    liquidate(
      liquidatedPositionId: BigNumberish,
      liquidatorOrder: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    manager(overrides?: CallOverrides): Promise<[string]>

    oraclePricesTick(
      oraclePrices: ITrade.OraclePriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    positionDeposit(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    positionWithdraw(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    registerToken(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    settlement(
      partA: ITrade.OrderStruct,
      partB: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    tokenAddress(token: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    transfer(
      to: string,
      token: BigNumberish,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  balanceOf(account: string, token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  bind(
    l1Account: IVault.SignedAccountStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  chanageManager(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deleverage(
    deleveragedOrder: ITrade.DeleverageOrderStruct,
    deleveragerOrder: ITrade.DeleverageOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deposit(
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disableManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  domainSeparator(overrides?: CallOverrides): Promise<string>

  fundingTick(
    indices: ITrade.IndiceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  liquidate(
    liquidatedPositionId: BigNumberish,
    liquidatorOrder: ITrade.OrderStruct,
    settlementInfo: ITrade.SettlementInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  manager(overrides?: CallOverrides): Promise<string>

  oraclePricesTick(
    oraclePrices: ITrade.OraclePriceStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  positionDeposit(
    positionId: BigNumberish,
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  positionWithdraw(
    positionId: BigNumberish,
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  registerToken(
    token: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  settlement(
    partA: ITrade.OrderStruct,
    partB: ITrade.OrderStruct,
    settlementInfo: ITrade.SettlementInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  tokenAddress(token: BigNumberish, overrides?: CallOverrides): Promise<string>

  transfer(
    to: string,
    token: BigNumberish,
    amount: BigNumberish,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    balanceOf(account: string, token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    bind(l1Account: IVault.SignedAccountStruct, overrides?: CallOverrides): Promise<void>

    chanageManager(newManager: string, overrides?: CallOverrides): Promise<void>

    deleverage(
      deleveragedOrder: ITrade.DeleverageOrderStruct,
      deleveragerOrder: ITrade.DeleverageOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>

    deposit(token: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    disableManager(overrides?: CallOverrides): Promise<void>

    domainSeparator(overrides?: CallOverrides): Promise<string>

    fundingTick(indices: ITrade.IndiceStruct[], overrides?: CallOverrides): Promise<void>

    liquidate(
      liquidatedPositionId: BigNumberish,
      liquidatorOrder: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>

    manager(overrides?: CallOverrides): Promise<string>

    oraclePricesTick(
      oraclePrices: ITrade.OraclePriceStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    positionDeposit(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    positionWithdraw(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    registerToken(token: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    settlement(
      partA: ITrade.OrderStruct,
      partB: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>

    tokenAddress(token: BigNumberish, overrides?: CallOverrides): Promise<string>

    transfer(
      to: string,
      token: BigNumberish,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(token: BigNumberish, amount: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'LogBind(string,string)'(addrL1?: null, addrL2?: null): LogBindEventFilter
    LogBind(addrL1?: null, addrL2?: null): LogBindEventFilter

    'LogDeposit(uint32,address,uint256)'(
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogDepositEventFilter
    LogDeposit(
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogDepositEventFilter

    'LogFundingTick(uint32,int256)'(
      positiontoken?: null,
      fundingRate?: null
    ): LogFundingTickEventFilter
    LogFundingTick(positiontoken?: null, fundingRate?: null): LogFundingTickEventFilter

    'LogPositionChange(uint64,uint256,uint256)'(
      positionId?: BigNumberish | null,
      marginAmount?: null,
      positionAmount?: null
    ): LogPositionChangeEventFilter
    LogPositionChange(
      positionId?: BigNumberish | null,
      marginAmount?: null,
      positionAmount?: null
    ): LogPositionChangeEventFilter

    'LogPositionDeposit(uint64,uint32,address,uint256)'(
      positionId?: BigNumberish | null,
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogPositionDepositEventFilter
    LogPositionDeposit(
      positionId?: BigNumberish | null,
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogPositionDepositEventFilter

    'LogPositionWithdrawn(uint64,uint32,address,uint256)'(
      positionId?: BigNumberish | null,
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogPositionWithdrawnEventFilter
    LogPositionWithdrawn(
      positionId?: BigNumberish | null,
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogPositionWithdrawnEventFilter

    'LogTransfer(address,address,uint32,uint256)'(
      from?: null,
      to?: null,
      token?: null,
      amount?: null
    ): LogTransferEventFilter
    LogTransfer(from?: null, to?: null, token?: null, amount?: null): LogTransferEventFilter

    'LogWithdrawn(uint32,address,uint256)'(
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogWithdrawnEventFilter
    LogWithdrawn(
      token?: BigNumberish | null,
      account?: string | null,
      amount?: null
    ): LogWithdrawnEventFilter

    'ManagerChanged(address,address)'(
      previousManager?: string | null,
      newManager?: string | null
    ): ManagerChangedEventFilter
    ManagerChanged(
      previousManager?: string | null,
      newManager?: string | null
    ): ManagerChangedEventFilter
  }

  estimateGas: {
    balanceOf(account: string, token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    bind(
      l1Account: IVault.SignedAccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    chanageManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deleverage(
      deleveragedOrder: ITrade.DeleverageOrderStruct,
      deleveragerOrder: ITrade.DeleverageOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deposit(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disableManager(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>

    fundingTick(
      indices: ITrade.IndiceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    liquidate(
      liquidatedPositionId: BigNumberish,
      liquidatorOrder: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    manager(overrides?: CallOverrides): Promise<BigNumber>

    oraclePricesTick(
      oraclePrices: ITrade.OraclePriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    positionDeposit(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    positionWithdraw(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    registerToken(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    settlement(
      partA: ITrade.OrderStruct,
      partB: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    tokenAddress(token: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: string,
      token: BigNumberish,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    balanceOf(
      account: string,
      token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    bind(
      l1Account: IVault.SignedAccountStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    chanageManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deleverage(
      deleveragedOrder: ITrade.DeleverageOrderStruct,
      deleveragerOrder: ITrade.DeleverageOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disableManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    fundingTick(
      indices: ITrade.IndiceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    liquidate(
      liquidatedPositionId: BigNumberish,
      liquidatorOrder: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>

    oraclePricesTick(
      oraclePrices: ITrade.OraclePriceStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    positionDeposit(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    positionWithdraw(
      positionId: BigNumberish,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    registerToken(
      token: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    settlement(
      partA: ITrade.OrderStruct,
      partB: ITrade.OrderStruct,
      settlementInfo: ITrade.SettlementInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    tokenAddress(token: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: string,
      token: BigNumberish,
      amount: BigNumberish,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
